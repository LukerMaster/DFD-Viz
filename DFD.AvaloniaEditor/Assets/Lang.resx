<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Application_Needs_Restart" xml:space="preserve">
    <value>Application needs a restart for changes to apply</value>
  </data>
  <data name="Collapse_all_nodes" xml:space="preserve">
    <value>Collapse all nodes</value>
  </data>
  <data name="Dark" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="DFD_Graph_Files" xml:space="preserve">
    <value>DFD Graph Files</value>
  </data>
  <data name="Documentation" xml:space="preserve">
    <value>Documentation</value>
  </data>
  <data name="Entire_Docs_File" xml:space="preserve">
    <value># Hold scroll and move mouse to pan.
# Scroll to zoom.
# Left click to collapse (collapsable) nodes.

# To start drawing, you need to define nodes.
# An node is one of the objects in DFD diagram.
# Process, Input/Output (IO) or Storage

# To define any node you always use this syntax:
# Type NodeName "Displayed name"
# Here are some simple definitions:

Process SomeProcess "Some Process"

IO UserInput "User Input"

Storage Db "Main Database"

# NodeName is essentially an unique identifier of an node.
# These identifiers are necessary when creating flows between nodes.

# Now to make flows between these nodes, you use this syntax:
# NodeNameA FlowType NodeNameB "Optional displayed name"

UserInput --&gt; SomeProcess "User gives input to a process"
SomeProcess &lt;-&gt; Db "Exchange of connection keys"

# There are two flowtypes
# Directional: --&gt;
# Bi-directional: &lt;-&gt; 

# Lines starting with # are completely ignored (ie. comment-like)
# Do NOT however place # after a statement on the same line.

# To make multi-level diagrams you define processes with subprocesses inside.
# Just add colon ':' at the end of process declaration
# And write processes in an indented scope.
Process AdvancedProcess "Advanced Process":
	Process SubProcessA "Sub-Process A"
	Process SubProcessB "Sub-Process B"
	Process SubProcessC "Sub-Process C with sub-process":
		Process SubProcessC1 "Sub-Process C1"

	# To create connections between subprocesses you can use syntax with dot
	SubProcessA --&gt; SubProcessC.SubProcessC1
	# You don't have to define full path as long as it is not ambiguous

# Flows will only search for nodes on the same or lower (more indented)
# levels, which means you cannot declare flow from (or to) an node that
# is somewhere higher up (less indented) - Breadth-first search is utilized here.

# Allowed:
# Process A "A":
#	Process B "B"
#	Process C "C":
#		Process C1 "C1"
#	B --&gt; C1

# Not allowed:
# Process A "A":
# 	Process B "B"
# 	Process C "C":
# 		Process C1 "C1"
# 		C1 --&gt; B

# By the way, this documentation is a valid DFD file
# you can paste it into the editor and it will generate a graph.</value>
  </data>
  <data name="Export_As" xml:space="preserve">
    <value>Export as</value>
  </data>
  <data name="Export_Graph_As" xml:space="preserve">
    <value>Export graph as</value>
  </data>
  <data name="File" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="Graph" xml:space="preserve">
    <value>Graph</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language 🌍</value>
  </data>
  <data name="Light" xml:space="preserve">
    <value>Light</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Open_DFD_File" xml:space="preserve">
    <value>Open DFD File</value>
  </data>
  <data name="Recompile" xml:space="preserve">
    <value>Recompile</value>
  </data>
  <data name="Refresh" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Save_As" xml:space="preserve">
    <value>Save as</value>
  </data>
  <data name="Save_Graph_As" xml:space="preserve">
    <value>Save graph as</value>
  </data>
  <data name="Show_Local_Docs" xml:space="preserve">
    <value>Show local documentation</value>
  </data>
  <data name="System" xml:space="preserve">
    <value>System</value>
    <comment>System theme setting</comment>
  </data>
  <data name="Theme" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="Toggle_root_node_visibility" xml:space="preserve">
    <value>Toggle root node visibility</value>
  </data>
  <data name="Your_DFD_code_preview" xml:space="preserve">
    <value>Your DFD code preview</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Graphviz_Error" xml:space="preserve">
    <value>There seems to be an error with Graphviz. Make sure it is installed</value>
  </data>
</root>