<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Application_Needs_Restart" xml:space="preserve">
    <value>Aplikacja wymaga ponownego uruchomienia celem zastosowania zmian</value>
  </data>
  <data name="Collapse_all_nodes" xml:space="preserve">
    <value>Zwiń wszystkie węzły</value>
  </data>
  <data name="Dark" xml:space="preserve">
    <value>Ciemny</value>
  </data>
  <data name="DFD_Graph_Files" xml:space="preserve">
    <value>Pliki grafów DFD</value>
  </data>
  <data name="Documentation" xml:space="preserve">
    <value>Dokumentacja</value>
  </data>
  <data name="Entire_Docs_File" xml:space="preserve">
    <value># Przytrzymaj środkowy przycisk myszy oraz ruszaj aby przesunąć.
# Pokrętło aby przybliżać.
# Lewy przycisk myszy aby zwijać (zwijalne) węzły.

# Żeby zacząć rysować, należy zdefiniować węzły.
# Węzeł to jeden z obiektów grafu DFD.
# Proces (Process), Wejście/Wyjście (IO) lub Dane (Storage)

# Żeby zadefiniować węzeł, zawsze używa się składni:
# Typ NazwaWęzła "Nazwa wyświetlana"
# Tutaj kilka prostych definicji:

Process SomeProcess "Jakiś Proces"

IO UserInput "Wejście danych użytkownika"

Storage Db "Główna baza danych"

# NazwaWęzła to nazwa programistyczna, unikalna dla danego węzła.
# Te nazwy są one potrzebne przy tworzeniu przepływów.

# Teraz, aby zrobić przepływ pomiędzy węzłami używa się składni:
# NazwaWęzłaA TypPrzepływu NazwaWęzłaB "Opcjonalna nazwa wyświetlana"

UserInput --&gt; SomeProcess "Użytkownik wprowadza dane dla procesu"
SomeProcess &lt;-&gt; Db "Wymiana kluczy połączenia"

# Są dwa typy przepływów
# Jednokierunkowe: --&gt;
# Dwukierunkowe: &lt;-&gt; 

# Linie zaczynające się na # są ignorowane (komentarze)
# Nie można umieszczać natomiast # po jakiejkolwiek definicji na tej samej linii.

# Aby stworzyć diagram wielopoziomowy, należy zdefiniować procesy z procesami w środku.
# Wystarczy dodać ':' na końcu deklaracji procesu
# I wpisać podprocesy z wcięciem.
Process AdvancedProcess "Zaawansowany proces":
	Process SubProcessA "Podproces A"
	Process SubProcessB "Podproces B"
	Process SubProcessC "Podproces C z podprocesem":
		Process SubProcessC1 "Podproces C1"

	# Aby stworzyć połączenie pomiędzy podprocesami można użyć składni z kropką
	SubProcessA --&gt; SubProcessC.SubProcessC1
	# Nie musisz definiować pełnej ścieżki do węzła, ważne żeby była jednoznaczna

# Przepływy szukają węzłów tylko na swoim poziomie oraz niższym (bardziej wciętym)
# Co znaczy, że nie można definiować przepływów do węzłów umieszczonych wyżej w hierarchii (mniej wciętych)
# Breadth-first search jest używany do wyszukiwania.

# Dozwolone:
# Process A "A":
#	Process B "B"
#	Process C "C":
#		Process C1 "C1"
#	B --&gt; C1

# Nie dozwolone:
# Process A "A":
# 	Process B "B"
# 	Process C "C":
# 		Process C1 "C1"
# 		C1 --&gt; B

# Wszystkie procesy są zamknięte w najwyższym procesie "System" o nazwie programistycznej "top".
# top.JakikolwiekProces.JakikolwiekInnyProces
# Zatem lepiej nie definiować węzła o nazwie programistycznej "top", żeby uniknąć zamieszania.

# Przy okazji, ta dokumentacja to poprawny plik DFD
# Możesz wkleić go w edytor i wygeneruje on graf.</value>
  </data>
  <data name="Export_As" xml:space="preserve">
    <value>Wyeksportuj jako</value>
  </data>
  <data name="Export_Graph_As" xml:space="preserve">
    <value>Wyeksportuj graf jako</value>
  </data>
  <data name="File" xml:space="preserve">
    <value>Plik</value>
  </data>
  <data name="Graph" xml:space="preserve">
    <value>Graf</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>Informacja</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Język 🌍</value>
  </data>
  <data name="Light" xml:space="preserve">
    <value>Jasny</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Open" xml:space="preserve">
    <value>Otwórz</value>
  </data>
  <data name="Open_DFD_File" xml:space="preserve">
    <value>Otwórz plik DFD</value>
  </data>
  <data name="Recompile" xml:space="preserve">
    <value>Zrekompiluj</value>
  </data>
  <data name="Refresh" xml:space="preserve">
    <value>Odśwież</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Zapisz</value>
  </data>
  <data name="Save_As" xml:space="preserve">
    <value>Zapisz jako</value>
  </data>
  <data name="Save_Graph_As" xml:space="preserve">
    <value>Zapisz graf jako</value>
  </data>
  <data name="Show_Local_Docs" xml:space="preserve">
    <value>Pokaż dokumentacje lokalną</value>
  </data>
  <data name="System" xml:space="preserve">
    <value>Systemowy</value>
    <comment>System theme setting</comment>
  </data>
  <data name="Theme" xml:space="preserve">
    <value>Motyw</value>
  </data>
  <data name="Toggle_top_node_visibility" xml:space="preserve">
    <value>Przełącz widoczność najwyższego węzła</value>
  </data>
  <data name="Your_DFD_code_preview" xml:space="preserve">
    <value>Twój podgląd kodu DFD</value>
  </data>
</root>